---
app_icon: spring

input:
  var:
    - name: GIT_URI
      required: true
      type: uri
      description: |-
        the URI of the project git repository. create empty git project and pass that uri here.
        eg. https://gitlab.com/<group-name>/<project-name>.git

    - name: APP_PACKAGE_NAME
      required: true
      type: name
      description: |-
        the name:tag for the application package to be published (e.g. registry-host/app-group/app-name)
        this package contains application artfacts, dockerfile & build.yaml file. it's used by image builder to build the application img

    - name: PROJECT_GROUP_ID
      required: true
      type: string
      description: the spring-boot group id for the project. 

    - name: PROJECT_ARTIFACT_ID
      required: true
      type: string
      description: the spring-boot artefact id for the application

    - name: PROJECT_ARTIFACT_VERSION
      required: true
      type: string
      default: 0.0.1
      description: the version of the application artifact

    # env variables required by build-image function
    - name: APPLICATION_NAME
      required: true
      type: string
      description: the application name to create openshift tekton pipeline resources eg. EventListner & PipelineResources

    - name: PUSH_IMAGE_REGISTRY
      required: true
      type: string
      description: |-
        the image registry name (eg. registry.gitlab.com)
        it's use to push application image into the image registry

    - name: PUSH_IMAGE_REPO
      required: true
      type: string
      description: |-
        the image repo name
        repo name of the image registry where image to be pushed. if repo is created under user then it will be username
        if it's created inside the specific group then it would be a group name

    - name: PUSH_IMAGE_NAME
      required: true
      type: string
      description: |-
        the application image name. it's a final image name that will be pushed into the img registry
        we can pass any name (eg. java-app)

    - name: PUSH_IMAGE_VERSION
      required: true
      type: string
      description: |-
        the application image version/tag. it's a docker image tag used to identify the img uniquely

    - name: PULL_IMAGE_REGISTRY
      required: true
      type: string
      description: |-
        application runtime image registry name (eg. registry.gitlab.com)
        this is the name of the image registry where base docker image is stored. it can be redhat, gitlab or quay registry

    - name: CRYPTO_KEY_EMAIL
      required: true
      type: string
      description: |-
        the email id which is used to generate crypto signature keys by using art cli
        this email id is used by img builder to sign the application image

    - name: GIT_REPO_EMAIL
      required: true
      type: string
      description: |-
        git user email id to push the spring-boot scaffold code
        email id is used to get authenticate with the code repo

    - name: PACKAGE_NAME
      required: true
      type: string
      description: |-
        the name:tag for the spring-boot recepie package to download (e.g. registry-host/app-group/package-name)
        it contains setup & pipeline flow alongwith build.yaml file
        this package should be already available in the artefact registry like nexus

    - name: ART_RUNNER_URI
      required: true
      type: string
      description: the URI of the Artisan runner to use

    - name: CI_NAMESPACE
      required: true
      type: string
      description: the name of the openshift/kubernetes namespace where the app pipeline should be created

    - name: HOST_NAME
      required: true
      type: string
      description: openshift or kubernetes cluster hostname required to deploy app & create an ingress

  secret:
    - name: PULL_IMAGE_REGISTRY_UNAME
      description: user name for the container registry where the base image is located

    - name: PULL_IMAGE_REGISTRY_PWD
      description: password for the container registry where the base image is located

    - name: PUSH_IMAGE_REGISTRY_UNAME
      description: user name for the container registry where the application image will be pushed

    - name: PUSH_IMAGE_REGISTRY_PWD
      description: password for the container registry where the application image will be pushed

    - name: REGISTRY_USER
      description: artefact registry user name where artefact will be pushed

    - name: REGISTRY_PWD
      description: artefact registry password where artefact will be pushed

    - name: GIT_REPO_UNAME
      description: |-
        git repo user name to push the code
        it's used to push the code generated by the spring-boot scaffold

    - name: GIT_REPO_TKN
      description: |-
        git repo password to push the code
        it's used to push the code generated by the spring-boot scaffold

    - name: SPRINGBOOT_SETUP_CREATE_PROJECT_OXART_REG_USER
      description: |- 
        user name for the container registry to download the recipe package
        this variable is required when we use art exec command to setup pipeline

    - name: SPRINGBOOT_SETUP_CREATE_PROJECT_OXART_REG_PWD
      description: |-
        password for the container registry to download the recipe package
        this variable is required when we use art exec command to setup pipeline

    - name: ART_REG_USER
      description: the user to authenticate with the Artisan Registry (used by Application publish-app function)

    - name: ART_REG_PWD
      description: the password to authenticate with the Artisan Registry (used by Application publish-app function)

    - name: SPRING_SPRINGBOOT_OXART_REG_USER
      description: the user to authenticate with the Artisan Registry (used by Application publish-app function)

    - name: SPRING_SPRINGBOOT_OXART_REG_PWD
      description: the password to authenticate with the Artisan Registry (used by Application publish-app function)

#  key:
#    - name: SIGNING_KEY
#      description: the private PGP key required to digitally sign the application package
#      private: true
#      path: /

#    - name: VERIFICATION_KEY
#      description: the public PGP key required to open the application package
#      path: /

#    - name: SPRINGBOOT_SETUP_CREATE_PROJECT_OXART_VERIFICATION_KEY
#      description: |-
#        the public PGP key required to open the recipe package
#        this variable is required when we use art exec command to setup pipeline
#      path: /
#    - name: SPRING_SPRINGBOOT_OXART_VERIFICATION_KEY
#      description: |-
#        the public PGP key required to open the recipe package
#        this variable is required when we use art exec command to setup pipeline
#      path: /

functions:
  - name: init-spring
    description: initialises the project and creates pipelines
    runtime: spring
    export: true
    run:
      # creates the spring-boot scaffold for the project
#      - art exe artisan.cmsee.stack/aps/CMSEE-deploy-keys import -s
      - spring init -n=${PROJECT_ARTIFACT_ID} -d=web --package-name=${PROJECT_GROUP_ID} --build=gradle ${PROJECT_ARTIFACT_ID}
      # copy project files to the correct location
      - cp -r ${PROJECT_ARTIFACT_ID}/. ./app
      # remove old folder
      - rm -R ${PROJECT_ARTIFACT_ID}
    input:
      var:
        - PROJECT_GROUP_ID
        - PROJECT_ARTIFACT_ID
        - PROJECT_ARTIFACT_VERSION
      secret:
        - ART_REG_USER
        - ART_REG_PWD
#        - SPRING_SPRINGBOOT_OXART_REG_PWD
#        - SPRING_SPRINGBOOT_OXART_REG_USER 
#      key:
#        - SPRING_SPRINGBOOT_OXART_VERIFICATION_KEY               

  # this function is used by setup pipeline
  - name: init-git
    description: initialises the git repository
    runtime: spring
    export: true
    run:   
      - sh setup/setup-git.sh ${GIT_REPO_UNAME} ${GIT_REPO_TKN}
    input:
      var:
        - GIT_URI
        - GIT_REPO_EMAIL
      secret:
        - GIT_REPO_UNAME
        - GIT_REPO_TKN
        - ART_REG_USER
        - ART_REG_PWD
#        - SPRING_SPRINGBOOT_OXART_REG_PWD
#        - SPRING_SPRINGBOOT_OXART_REG_USER               

  # used this function on VM/local m/c to create the spring-boot setup tekton pipeline into openshift
  - name: setup
    description: create a tekton pipeline in openshift to build, push the spring-boot scaffold & create setup or application pipeline
    runtime: ubi-min
    export: true
    run:
      - art merge setup/setup_flow_bare.yaml.tem
      - art flow run setup/setup_flow_bare.yaml -b . ${ART_RUNNER_URI}
    input:
#      key:
#        - SPRINGBOOT_SETUP_CREATE_PROJECT_OXART_VERIFICATION_KEY
#        - SPRING_SPRINGBOOT_OXART_VERIFICATION_KEY
#        - SIGNING_KEY
#        - VERIFICATION_KEY
      secret:
        - PULL_IMAGE_REGISTRY_PWD
        - PULL_IMAGE_REGISTRY_UNAME
        - PUSH_IMAGE_REGISTRY_PWD
        - PUSH_IMAGE_REGISTRY_UNAME
        - GIT_REPO_TKN
        - GIT_REPO_UNAME
#        - SPRINGBOOT_SETUP_CREATE_PROJECT_OXART_REG_USER
#        - SPRINGBOOT_SETUP_CREATE_PROJECT_OXART_REG_PWD
        - ART_REG_USER
        - ART_REG_PWD
#        - SPRING_SPRINGBOOT_OXART_REG_PWD
#        - SPRING_SPRINGBOOT_OXART_REG_USER
      var:
        - APP_PACKAGE_NAME
        - APPLICATION_NAME
        - CRYPTO_KEY_EMAIL
        - PACKAGE_NAME
        - PULL_IMAGE_REGISTRY
        - PUSH_IMAGE_NAME
        - PUSH_IMAGE_REGISTRY
        - PUSH_IMAGE_REPO
        - PUSH_IMAGE_VERSION
        - GIT_REPO_EMAIL
        - GIT_URI
        - PROJECT_ARTIFACT_ID
        - PROJECT_ARTIFACT_VERSION
        - PROJECT_GROUP_ID
        - ART_RUNNER_URI


  - name: ci
    description: create a pipeline in host to build and package spring-boot
    runtime: ubi-min
    export: true
    run:
      - art merge setup/ci_flow_bare.yaml.tem
      - art flow run setup/ci_flow_bare.yaml -b ./app ${ART_RUNNER_URI}
    input:
      secret:
        - PULL_IMAGE_REGISTRY_PWD
        - PULL_IMAGE_REGISTRY_UNAME
        - PUSH_IMAGE_REGISTRY_PWD
        - PUSH_IMAGE_REGISTRY_UNAME
        - GIT_REPO_TKN
        - GIT_REPO_UNAME
        - ART_REG_USER
        - ART_REG_PWD
      var:
        - APP_PACKAGE_NAME
        - APPLICATION_NAME
        - CRYPTO_KEY_EMAIL
        - PULL_IMAGE_REGISTRY
        - PUSH_IMAGE_NAME
        - PUSH_IMAGE_REGISTRY
        - PUSH_IMAGE_REPO
        - PUSH_IMAGE_VERSION
        - GIT_URI
        - PROJECT_ARTIFACT_ID
        - PROJECT_ARTIFACT_VERSION
        - PROJECT_GROUP_ID
        - ART_RUNNER_URI        
...